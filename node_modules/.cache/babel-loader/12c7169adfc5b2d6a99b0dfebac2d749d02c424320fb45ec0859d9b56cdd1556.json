{"ast":null,"code":"import { formatDate, generateRandomID } from \"../../utilities/utils\";\nexport const CreateNewInvoices = (newItems, editedForm, status) => {\n  editedForm.items = newItems;\n  editedForm.status = status;\n  editedForm.createdAt = formatDate(new Date());\n  editedForm.id = generateRandomID(5);\n};\n_c = CreateNewInvoices;\nexport const StoreNewInvoice = editedForm => {\n  console.log(\"new invoice\", editedForm);\n  // Retrieve the existing array from localStorage\n  const existingArray = localStorage.getItem('invoices');\n  let newArray = [];\n  if (existingArray) {\n    // If the array exists, parse it from JSON\n    newArray = JSON.parse(existingArray);\n  }\n\n  // Append the new object to the array\n  console.log(newArray);\n  // newArray.push(object);\n\n  // Store the updated array back in localStorage\n  localStorage.setItem('myArray', JSON.stringify(editedForm));\n};\n_c2 = StoreNewInvoice;\nvar _c, _c2;\n$RefreshReg$(_c, \"CreateNewInvoices\");\n$RefreshReg$(_c2, \"StoreNewInvoice\");","map":{"version":3,"names":["formatDate","generateRandomID","CreateNewInvoices","newItems","editedForm","status","items","createdAt","Date","id","_c","StoreNewInvoice","console","log","existingArray","localStorage","getItem","newArray","JSON","parse","setItem","stringify","_c2","$RefreshReg$"],"sources":["C:/Users/Memo/Documents/Full-Stack/HTML-CSS-Tutorialk/invoice-app/invoice-app/src/Components/InvoiceDetails/NewInvoices.js"],"sourcesContent":["import { formatDate, generateRandomID } from \"../../utilities/utils\";\r\n\r\nexport const CreateNewInvoices = (newItems, editedForm, status) => {\r\n    editedForm.items = newItems;\r\n    editedForm.status = status;\r\n    editedForm.createdAt = formatDate(new Date());\r\n    editedForm.id = generateRandomID(5);\r\n};\r\n\r\nexport const StoreNewInvoice = (editedForm) => {\r\n    console.log(\"new invoice\", editedForm);\r\n    // Retrieve the existing array from localStorage\r\n    const existingArray = localStorage.getItem('invoices');\r\n\r\n    let newArray = [];\r\n\r\n    if (existingArray) {\r\n        // If the array exists, parse it from JSON\r\n        newArray = JSON.parse(existingArray);\r\n    }\r\n\r\n    // Append the new object to the array\r\n    console.log(newArray);\r\n    // newArray.push(object);\r\n\r\n    // Store the updated array back in localStorage\r\n    localStorage.setItem('myArray', JSON.stringify(editedForm));\r\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,gBAAgB,QAAQ,uBAAuB;AAEpE,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,MAAM,KAAK;EAC/DD,UAAU,CAACE,KAAK,GAAGH,QAAQ;EAC3BC,UAAU,CAACC,MAAM,GAAGA,MAAM;EAC1BD,UAAU,CAACG,SAAS,GAAGP,UAAU,CAAC,IAAIQ,IAAI,CAAC,CAAC,CAAC;EAC7CJ,UAAU,CAACK,EAAE,GAAGR,gBAAgB,CAAC,CAAC,CAAC;AACvC,CAAC;AAACS,EAAA,GALWR,iBAAiB;AAO9B,OAAO,MAAMS,eAAe,GAAIP,UAAU,IAAK;EAC3CQ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAET,UAAU,CAAC;EACtC;EACA,MAAMU,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAEtD,IAAIC,QAAQ,GAAG,EAAE;EAEjB,IAAIH,aAAa,EAAE;IACf;IACAG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;EACxC;;EAEA;EACAF,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAC;EACrB;;EAEA;EACAF,YAAY,CAACK,OAAO,CAAC,SAAS,EAAEF,IAAI,CAACG,SAAS,CAACjB,UAAU,CAAC,CAAC;AAC/D,CAAC;AAACkB,GAAA,GAlBWX,eAAe;AAAA,IAAAD,EAAA,EAAAY,GAAA;AAAAC,YAAA,CAAAb,EAAA;AAAAa,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}