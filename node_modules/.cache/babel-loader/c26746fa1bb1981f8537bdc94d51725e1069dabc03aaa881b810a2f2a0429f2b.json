{"ast":null,"code":"import mysql2 from 'mysql2';\nimport * as utils from '../../utilities/utils.js';\nconst {\n  formatDate,\n  generateRandomID,\n  calcTotal\n} = utils;\nconst CreateNewInvoices = (newItems, editedForm, status) => {\n  editedForm.items = newItems;\n  editedForm.status = status;\n  editedForm.createdAt = formatDate(new Date());\n  editedForm.id = generateRandomID(5);\n  editedForm.total = calcTotal(newItems);\n};\n_c = CreateNewInvoices;\nconst StoreNewInvoice = editedForm => {\n  // Retrieve the existing array from localStorage\n  const existingArray = localStorage.getItem('invoices');\n  let newArray = [];\n  if (existingArray) {\n    // If the array exists, parse it from JSON\n    newArray = JSON.parse(existingArray);\n  }\n\n  // Append the new object to the array\n  newArray.push(editedForm);\n\n  // Store the updated array back in localStorage\n  localStorage.setItem('invoices', JSON.stringify(newArray));\n  return true;\n};\n_c2 = StoreNewInvoice;\nconst StoreEditInvoice = (id, editedForm) => {\n  // Get the existing invoices array from localStorage\n  const invoicesJSON = localStorage.getItem('invoices');\n\n  // Parse the JSON data to get the array of objects\n  const invoices = JSON.parse(invoicesJSON);\n\n  // Find the index of the object with the matching ID\n  const index = invoices.findIndex(invoice => invoice.id === id);\n  if (index !== -1) {\n    // Replace the old object with the new one\n    invoices[index] = editedForm;\n\n    // Convert the updated array back to JSON\n    const updatedInvoicesJSON = JSON.stringify(invoices);\n\n    // Update the 'invoices' key in localStorage\n    localStorage.setItem('invoices', updatedInvoicesJSON);\n    console.log(`Invoice with ID '${id}' replaced.`);\n    return true;\n  } else {\n    console.log(`Invoice with ID '${id}' not found.`);\n  }\n};\n_c3 = StoreEditInvoice;\nconst DeleteStoredItem = id => {\n  try {\n    // Get the existing invoices array from localStorage\n    const invoicesJSON = localStorage.getItem('invoices');\n    if (!invoicesJSON) {\n      // If the 'invoices' key doesn't exist, nothing to delete\n      return;\n    }\n\n    // Parse the JSON string to an array\n    const invoicesArray = JSON.parse(invoicesJSON);\n\n    // Find the index of the object with the matching id\n    const indexToDelete = invoicesArray.findIndex(item => item.id === id);\n    if (indexToDelete !== -1) {\n      // If the index is found, remove the object from the array\n      invoicesArray.splice(indexToDelete, 1);\n\n      // Update the array in localStorage\n      localStorage.setItem('invoices', JSON.stringify(invoicesArray));\n    }\n  } catch (error) {\n    console.error('Error deleting item:', error);\n  }\n};\n_c4 = DeleteStoredItem;\nconst GetAllInvoices = () => {\n  return JSON.parse(localStorage.getItem('invoices'));\n};\n_c5 = GetAllInvoices;\nmodule.exports = {\n  GetAllInvoices,\n  DeleteStoredItem,\n  StoreEditInvoice,\n  StoreNewInvoice,\n  CreateNewInvoices\n};\n\n// Basic example of adding invoice to mysql table\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"CreateNewInvoices\");\n$RefreshReg$(_c2, \"StoreNewInvoice\");\n$RefreshReg$(_c3, \"StoreEditInvoice\");\n$RefreshReg$(_c4, \"DeleteStoredItem\");\n$RefreshReg$(_c5, \"GetAllInvoices\");","map":{"version":3,"names":["mysql2","utils","formatDate","generateRandomID","calcTotal","CreateNewInvoices","newItems","editedForm","status","items","createdAt","Date","id","total","_c","StoreNewInvoice","existingArray","localStorage","getItem","newArray","JSON","parse","push","setItem","stringify","_c2","StoreEditInvoice","invoicesJSON","invoices","index","findIndex","invoice","updatedInvoicesJSON","console","log","_c3","DeleteStoredItem","invoicesArray","indexToDelete","item","splice","error","_c4","GetAllInvoices","_c5","module","exports","$RefreshReg$"],"sources":["C:/Users/Memo/Documents/Full-Stack/HTML-CSS-Tutorialk/invoice-app/invoice-app/src/Components/InvoiceDetails/NewInvoices.mjs"],"sourcesContent":["import mysql2 from 'mysql2';\r\nimport * as utils from '../../utilities/utils.js';\r\n\r\nconst { formatDate, generateRandomID, calcTotal } = utils;\r\n\r\nconst CreateNewInvoices = (newItems, editedForm, status) => {\r\n    editedForm.items = newItems;\r\n    editedForm.status = status;\r\n    editedForm.createdAt = formatDate(new Date());\r\n    editedForm.id = generateRandomID(5);\r\n\r\n    editedForm.total = calcTotal(newItems);\r\n};\r\n\r\nconst StoreNewInvoice = (editedForm) => {\r\n    // Retrieve the existing array from localStorage\r\n    const existingArray = localStorage.getItem('invoices');\r\n\r\n    let newArray = [];\r\n\r\n    if (existingArray) {\r\n        // If the array exists, parse it from JSON\r\n        newArray = JSON.parse(existingArray);\r\n    }\r\n\r\n    // Append the new object to the array\r\n    newArray.push(editedForm);\r\n\r\n    // Store the updated array back in localStorage\r\n    localStorage.setItem('invoices', JSON.stringify(newArray));\r\n    return true;\r\n};\r\n\r\nconst StoreEditInvoice = (id, editedForm) => {\r\n  // Get the existing invoices array from localStorage\r\n  const invoicesJSON = localStorage.getItem('invoices');\r\n  \r\n  // Parse the JSON data to get the array of objects\r\n  const invoices = JSON.parse(invoicesJSON);\r\n  \r\n  // Find the index of the object with the matching ID\r\n  const index = invoices.findIndex(invoice => invoice.id === id);\r\n  \r\n  if (index !== -1) {\r\n    // Replace the old object with the new one\r\n    invoices[index] = editedForm;\r\n    \r\n    // Convert the updated array back to JSON\r\n    const updatedInvoicesJSON = JSON.stringify(invoices);\r\n    \r\n    // Update the 'invoices' key in localStorage\r\n    localStorage.setItem('invoices', updatedInvoicesJSON);\r\n    \r\n    console.log(`Invoice with ID '${id}' replaced.`);\r\n    return true;\r\n  } else {\r\n    console.log(`Invoice with ID '${id}' not found.`);\r\n  }\r\n};\r\n\r\nconst DeleteStoredItem = (id) => {\r\n    try {\r\n      // Get the existing invoices array from localStorage\r\n      const invoicesJSON = localStorage.getItem('invoices');\r\n      if (!invoicesJSON) {\r\n        // If the 'invoices' key doesn't exist, nothing to delete\r\n        return;\r\n      }\r\n  \r\n      // Parse the JSON string to an array\r\n      const invoicesArray = JSON.parse(invoicesJSON);\r\n  \r\n      // Find the index of the object with the matching id\r\n      const indexToDelete = invoicesArray.findIndex(item => item.id === id);\r\n  \r\n      if (indexToDelete !== -1) {\r\n        // If the index is found, remove the object from the array\r\n        invoicesArray.splice(indexToDelete, 1);\r\n  \r\n        // Update the array in localStorage\r\n        localStorage.setItem('invoices', JSON.stringify(invoicesArray));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting item:', error);\r\n    }\r\n  };\r\n\r\n\r\nconst GetAllInvoices = () => {\r\n    return JSON.parse(localStorage.getItem('invoices'));  \r\n};\r\n\r\nmodule.exports = {GetAllInvoices, DeleteStoredItem, StoreEditInvoice, StoreNewInvoice, CreateNewInvoices}\r\n\r\n\r\n// Basic example of adding invoice to mysql table\r\n\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAO,KAAKC,KAAK,MAAM,0BAA0B;AAEjD,MAAM;EAAEC,UAAU;EAAEC,gBAAgB;EAAEC;AAAU,CAAC,GAAGH,KAAK;AAEzD,MAAMI,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,MAAM,KAAK;EACxDD,UAAU,CAACE,KAAK,GAAGH,QAAQ;EAC3BC,UAAU,CAACC,MAAM,GAAGA,MAAM;EAC1BD,UAAU,CAACG,SAAS,GAAGR,UAAU,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;EAC7CJ,UAAU,CAACK,EAAE,GAAGT,gBAAgB,CAAC,CAAC,CAAC;EAEnCI,UAAU,CAACM,KAAK,GAAGT,SAAS,CAACE,QAAQ,CAAC;AAC1C,CAAC;AAACQ,EAAA,GAPIT,iBAAiB;AASvB,MAAMU,eAAe,GAAIR,UAAU,IAAK;EACpC;EACA,MAAMS,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAEtD,IAAIC,QAAQ,GAAG,EAAE;EAEjB,IAAIH,aAAa,EAAE;IACf;IACAG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;EACxC;;EAEA;EACAG,QAAQ,CAACG,IAAI,CAACf,UAAU,CAAC;;EAEzB;EACAU,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAACL,QAAQ,CAAC,CAAC;EAC1D,OAAO,IAAI;AACf,CAAC;AAACM,GAAA,GAjBIV,eAAe;AAmBrB,MAAMW,gBAAgB,GAAGA,CAACd,EAAE,EAAEL,UAAU,KAAK;EAC3C;EACA,MAAMoB,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;EAErD;EACA,MAAMU,QAAQ,GAAGR,IAAI,CAACC,KAAK,CAACM,YAAY,CAAC;;EAEzC;EACA,MAAME,KAAK,GAAGD,QAAQ,CAACE,SAAS,CAACC,OAAO,IAAIA,OAAO,CAACnB,EAAE,KAAKA,EAAE,CAAC;EAE9D,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB;IACAD,QAAQ,CAACC,KAAK,CAAC,GAAGtB,UAAU;;IAE5B;IACA,MAAMyB,mBAAmB,GAAGZ,IAAI,CAACI,SAAS,CAACI,QAAQ,CAAC;;IAEpD;IACAX,YAAY,CAACM,OAAO,CAAC,UAAU,EAAES,mBAAmB,CAAC;IAErDC,OAAO,CAACC,GAAG,CAAE,oBAAmBtB,EAAG,aAAY,CAAC;IAChD,OAAO,IAAI;EACb,CAAC,MAAM;IACLqB,OAAO,CAACC,GAAG,CAAE,oBAAmBtB,EAAG,cAAa,CAAC;EACnD;AACF,CAAC;AAACuB,GAAA,GAzBIT,gBAAgB;AA2BtB,MAAMU,gBAAgB,GAAIxB,EAAE,IAAK;EAC7B,IAAI;IACF;IACA,MAAMe,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACrD,IAAI,CAACS,YAAY,EAAE;MACjB;MACA;IACF;;IAEA;IACA,MAAMU,aAAa,GAAGjB,IAAI,CAACC,KAAK,CAACM,YAAY,CAAC;;IAE9C;IACA,MAAMW,aAAa,GAAGD,aAAa,CAACP,SAAS,CAACS,IAAI,IAAIA,IAAI,CAAC3B,EAAE,KAAKA,EAAE,CAAC;IAErE,IAAI0B,aAAa,KAAK,CAAC,CAAC,EAAE;MACxB;MACAD,aAAa,CAACG,MAAM,CAACF,aAAa,EAAE,CAAC,CAAC;;MAEtC;MACArB,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAACa,aAAa,CAAC,CAAC;IACjE;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAACC,GAAA,GAzBEN,gBAAgB;AA4BtB,MAAMO,cAAc,GAAGA,CAAA,KAAM;EACzB,OAAOvB,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AACvD,CAAC;AAAC0B,GAAA,GAFID,cAAc;AAIpBE,MAAM,CAACC,OAAO,GAAG;EAACH,cAAc;EAAEP,gBAAgB;EAAEV,gBAAgB;EAAEX,eAAe;EAAEV;AAAiB,CAAC;;AAGzG;AAAA,IAAAS,EAAA,EAAAW,GAAA,EAAAU,GAAA,EAAAO,GAAA,EAAAE,GAAA;AAAAG,YAAA,CAAAjC,EAAA;AAAAiC,YAAA,CAAAtB,GAAA;AAAAsB,YAAA,CAAAZ,GAAA;AAAAY,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAH,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}