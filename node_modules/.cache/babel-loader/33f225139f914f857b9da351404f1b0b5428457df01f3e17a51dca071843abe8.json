{"ast":null,"code":"import { formatDate, generateRandomID, calcTotal } from \"../../utilities/utils\";\nexport const CreateNewInvoices = (newItems, editedForm, status) => {\n  editedForm.items = newItems;\n  editedForm.status = status;\n  editedForm.createdAt = formatDate(new Date());\n  editedForm.id = generateRandomID(5);\n  editedForm.total = calcTotal(newItems);\n};\n_c = CreateNewInvoices;\nexport const StoreNewInvoice = editedForm => {\n  console.log(\"new invoice\", editedForm);\n  // Retrieve the existing array from localStorage\n  const existingArray = localStorage.getItem('invoices');\n  let newArray = [];\n  if (existingArray) {\n    // If the array exists, parse it from JSON\n    newArray = JSON.parse(existingArray);\n  }\n\n  // Append the new object to the array\n  newArray.push(editedForm);\n\n  // Store the updated array back in localStorage\n  localStorage.setItem('invoices', JSON.stringify(newArray));\n};\n_c2 = StoreNewInvoice;\nexport const GetAllInvoices = () => {\n  return JSON.parse(localStorage.getItem('invoices'));\n};\n_c3 = GetAllInvoices;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CreateNewInvoices\");\n$RefreshReg$(_c2, \"StoreNewInvoice\");\n$RefreshReg$(_c3, \"GetAllInvoices\");","map":{"version":3,"names":["formatDate","generateRandomID","calcTotal","CreateNewInvoices","newItems","editedForm","status","items","createdAt","Date","id","total","_c","StoreNewInvoice","console","log","existingArray","localStorage","getItem","newArray","JSON","parse","push","setItem","stringify","_c2","GetAllInvoices","_c3","$RefreshReg$"],"sources":["C:/Users/Memo/Documents/Full-Stack/HTML-CSS-Tutorialk/invoice-app/invoice-app/src/Components/InvoiceDetails/NewInvoices.js"],"sourcesContent":["import { formatDate, generateRandomID, calcTotal } from \"../../utilities/utils\";\r\n\r\nexport const CreateNewInvoices = (newItems, editedForm, status) => {\r\n    editedForm.items = newItems;\r\n    editedForm.status = status;\r\n    editedForm.createdAt = formatDate(new Date());\r\n    editedForm.id = generateRandomID(5);\r\n\r\n    editedForm.total = calcTotal(newItems);\r\n};\r\n\r\nexport const StoreNewInvoice = (editedForm) => {\r\n    console.log(\"new invoice\", editedForm);\r\n    // Retrieve the existing array from localStorage\r\n    const existingArray = localStorage.getItem('invoices');\r\n\r\n    let newArray = [];\r\n\r\n    if (existingArray) {\r\n        // If the array exists, parse it from JSON\r\n        newArray = JSON.parse(existingArray);\r\n    }\r\n\r\n    // Append the new object to the array\r\n    newArray.push(editedForm);\r\n\r\n    // Store the updated array back in localStorage\r\n    localStorage.setItem('invoices', JSON.stringify(newArray));\r\n};\r\n\r\nexport const GetAllInvoices = () => {\r\n    return JSON.parse(localStorage.getItem('invoices'));  \r\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,uBAAuB;AAE/E,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,UAAU,EAAEC,MAAM,KAAK;EAC/DD,UAAU,CAACE,KAAK,GAAGH,QAAQ;EAC3BC,UAAU,CAACC,MAAM,GAAGA,MAAM;EAC1BD,UAAU,CAACG,SAAS,GAAGR,UAAU,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;EAC7CJ,UAAU,CAACK,EAAE,GAAGT,gBAAgB,CAAC,CAAC,CAAC;EAEnCI,UAAU,CAACM,KAAK,GAAGT,SAAS,CAACE,QAAQ,CAAC;AAC1C,CAAC;AAACQ,EAAA,GAPWT,iBAAiB;AAS9B,OAAO,MAAMU,eAAe,GAAIR,UAAU,IAAK;EAC3CS,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEV,UAAU,CAAC;EACtC;EACA,MAAMW,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAEtD,IAAIC,QAAQ,GAAG,EAAE;EAEjB,IAAIH,aAAa,EAAE;IACf;IACAG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;EACxC;;EAEA;EACAG,QAAQ,CAACG,IAAI,CAACjB,UAAU,CAAC;;EAEzB;EACAY,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEH,IAAI,CAACI,SAAS,CAACL,QAAQ,CAAC,CAAC;AAC9D,CAAC;AAACM,GAAA,GAjBWZ,eAAe;AAmB5B,OAAO,MAAMa,cAAc,GAAGA,CAAA,KAAM;EAChC,OAAON,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;AACvD,CAAC;AAACS,GAAA,GAFWD,cAAc;AAAA,IAAAd,EAAA,EAAAa,GAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}