[{"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\index.js":"1","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\reportWebVitals.js":"2","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\App\\App.js":"3","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\SideNav\\SideNav.js":"4","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\MainContent\\MainContent.js":"5","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\InvoiceDetails\\InvoiceDetails.js":"6","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\FormEditing\\FormCreation.js":"7","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\FormEditing\\FormEditing.js":"8","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\utilities\\utils.js":"9","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\InvoiceDetails\\NewInvoices.mjs":"10"},{"size":550,"mtime":1691081773485,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1691081577822,"results":"13","hashOfConfig":"12"},{"size":4676,"mtime":1692664981003,"results":"14","hashOfConfig":"12"},{"size":1035,"mtime":1692664352630,"results":"15","hashOfConfig":"12"},{"size":4603,"mtime":1692834555741,"results":"16","hashOfConfig":"12"},{"size":10422,"mtime":1692836920668,"results":"17","hashOfConfig":"12"},{"size":3559,"mtime":1692837194626,"results":"18","hashOfConfig":"12"},{"size":11346,"mtime":1691860519699,"results":"19","hashOfConfig":"12"},{"size":1551,"mtime":1692668544354,"results":"20","hashOfConfig":"12"},{"size":2878,"mtime":1692834556021,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"kvtsfi",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\index.js",[],[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\App\\App.js",[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\SideNav\\SideNav.js",["55","56"],[],"import \"./SideNav.css\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport logo from \"../../images/assets/logo.svg\";\r\nimport moon from \"../../images/assets/icon-moon.svg\";\r\nimport sun from \"../../images/assets/icon-sun.svg\";\r\nimport avatar from \"../../images/assets/image-avatar.jpg\";\r\n\r\nconst SideNav = ({theme, handleThemeChange}) => {\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"side-nav\">\r\n      <div className='side-nav_logo-wrapper'>\r\n        <img className=\"side-nav__logo\" src={logo} alt=\"logo\"></img>\r\n      </div>\r\n      <button className='side-nav__theme-button'>\r\n        <img\r\n          className=\"side-nav__theme-button\"\r\n          src={theme.isLight ? moon : sun}\r\n          alt=\"theme button\"\r\n          onClick={handleThemeChange}\r\n        ></img>\r\n      </button>\r\n\r\n      <div className=\"side-nav__theme-seperator\"></div>\r\n      <button className='side-nav__avatar-wrapper'>\r\n        <img className=\"side-nav__avatar\" src={avatar} alt=\"avatar\"></img>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nexport default SideNav;","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\MainContent\\MainContent.js",[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\InvoiceDetails\\InvoiceDetails.js",[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\FormEditing\\FormCreation.js",["57"],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\FormEditing\\FormEditing.js",["58"],[],"import './FormEditing.css'\r\nimport backArrow from '../../images/assets/icon-arrow-down.svg';\r\nimport deleteImg from '../../images/assets/icon-delete.svg';\r\nimport { EditInvoiceFooter } from '../InvoiceDetails/InvoiceDetails';\r\nimport { useEffect, useState } from 'react';\r\nimport { StoreEditInvoice } from '../InvoiceDetails/NewInvoices';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cleanForm } from '../../utilities/utils';\r\n\r\nconst EditFormContainer = ({editedForm, selectedInvoice, handleInputChange, setEditedForm, updateInvoiceData, handleFormInputChange}) => {\r\n    const [isReturnClicked, setIsReturnClicked] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setEditedForm(selectedInvoice);\r\n    }, [])\r\n\r\n\r\n    const handleSaveSubmit = () => {\r\n        const completed = StoreEditInvoice(editedForm.id, editedForm);\r\n        if (completed) {\r\n            updateInvoiceData(editedForm);\r\n            navigate('/');\r\n        }\r\n    }\r\n\r\n    const handleCancelSubmit = () => {\r\n        setEditedForm(cleanForm());\r\n        navigate('/');\r\n    }\r\n\r\n    const handleReturnClick = () => {\r\n        setIsReturnClicked(true);\r\n        setEditedForm(cleanForm());\r\n\r\n        setTimeout(() => {\r\n            navigate(-1);\r\n        }, 1000)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {editedForm ?         \r\n                <div className={`Editting-Form-Wrapper ${isReturnClicked ? 'return-page-shifted' : ''}`}>\r\n                    <EditForm form={editedForm} handleInputChange={handleInputChange} handleReturnClick={handleReturnClick} handleFormInputChange={handleFormInputChange}/>\r\n                    <EditInvoiceFooter handleSaveSubmit={handleSaveSubmit} handleCancelSubmit={handleCancelSubmit} />\r\n                </div> : \r\n                'Loading..'}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport const EditForm = ({form, handleInputChange, handleReturnClick, handleFormInputChange}) => {\r\n    return (\r\n        <div className='Editting-Form-Wrapper'>\r\n            <div\r\n                className={`return-page-wrapper`}\r\n                onClick={handleReturnClick}\r\n            >\r\n                <img src={backArrow} alt=''/>\r\n                Go back\r\n            </div>\r\n            <div className='Editing-Form'>\r\n                <h2>Edit <span>#</span>{form.id}</h2>\r\n                <BillFrom editedForm={form} handleInputChange={handleInputChange}/>\r\n                <BillTo editedForm={form} handleInputChange={handleInputChange}/>\r\n                <ItemList form={form} handleFormInputChange={handleFormInputChange} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const BillFrom = ({editedForm, handleInputChange}) => {\r\n    return (\r\n        <div className='Bill-From-Wrapper'>\r\n            <h4 className='billing-header' id='bill-from'>Bill From</h4>\r\n            <div className='Street-Address-Container form-container'>\r\n                <label htmlFor='street'>Street Address</label>\r\n                <input \r\n                    type='text' \r\n                    name='street' \r\n                    value={editedForm.senderAddress.street}\r\n                    onChange={e => handleInputChange('senderAddress-street', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='City-Postcode-Wrapper'>\r\n                <div className='City-Container form-container'>\r\n                    <label htmlFor='city'>City</label>\r\n                    <input \r\n                        type='text' \r\n                        name='city' \r\n                        value={editedForm.senderAddress.city} \r\n                        onChange={e => handleInputChange('senderAddress-city', e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className='Postcode-Container form-container'>\r\n                    <label htmlFor='postCode'>Post Code</label>\r\n                    <input \r\n                        type='text' \r\n                        name='postCode' \r\n                        value={editedForm.senderAddress.postCode} \r\n                        onChange={e => handleInputChange('senderAddress-postCode', e.target.value)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='Country-Container form-container'>\r\n                <label htmlFor='country'>Country</label>\r\n                <input \r\n                    type='text' \r\n                    name='country' \r\n                    value={editedForm.senderAddress.country}\r\n                    onChange={e => handleInputChange('senderAddress-country', e.target.value)} \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const BillTo = ({editedForm, handleInputChange}) => {\r\n\r\n\r\n    return (\r\n        <div className='Bill-To-Wrapper'>\r\n            <h4 className='billing-header' id='bill-to'>Bill To</h4>\r\n            <div className='Name-Container form-container'>\r\n                <label htmlFor='clientName'>Client's Name</label>\r\n                <input \r\n                    type='text' \r\n                    name='clientName' \r\n                    value={editedForm.clientName}\r\n                    onChange={e => handleInputChange('clientName', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='Email-Container form-container'>\r\n                <label htmlFor='clientEmail'>Client's Email</label>\r\n                <input \r\n                    type='text' \r\n                    name='clientEmail' \r\n                    value={editedForm.clientEmail}\r\n                    onChange={e => handleInputChange('clientEmail', e.target.value)} \r\n                />\r\n            </div>\r\n            <div className='Street-Address-Container form-container'>\r\n                <label htmlFor='street'>Street Address</label>\r\n                <input \r\n                    type='text' \r\n                    name='street' \r\n                    value={editedForm.clientAddress.street}\r\n                    onChange={e => handleInputChange('clientAddress-street', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='City-Postcode-Wrapper'>\r\n                <div className='City-Container form-container'>\r\n                    <label htmlFor='city'>City</label>\r\n                    <input \r\n                        type='text' \r\n                        name='city' \r\n                        value={editedForm.clientAddress.city}\r\n                        onChange={e => handleInputChange('clientAddress-city', e.target.value)} \r\n                    />\r\n                </div>\r\n                <div className='Postcode-Container form-container'>\r\n                    <label htmlFor='postCode'>Post Code</label>\r\n                    <input type='text' \r\n                    name='postCode' \r\n                    value={editedForm.clientAddress.postCode}\r\n                    onChange={e => handleInputChange('clientAddress-postCode', e.target.value)} \r\n                />\r\n                </div>\r\n            </div>\r\n            <div className='Country-Container form-container'>\r\n                <label htmlFor='country'>Country</label>\r\n                <input \r\n                    type='text' \r\n                    name='country' \r\n                    value={editedForm.clientAddress.country} \r\n                    onChange={e => handleInputChange('clientAddress-country', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='invoice-date-container form-container'>\r\n                <label htmlFor='invoice-date' id='invoice-date-label'>Invoice Date</label>\r\n                <input \r\n                    type='text' \r\n                    name='invoice-date'\r\n                    value={editedForm.paymentDue}\r\n                    onChange={e => handleInputChange('paymentDue', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='payment-terms-container form-container'>\r\n                <label htmlFor='payment-terms' id='payment-terms-label'>Payment Terms</label>\r\n                <select\r\n                    name='payment-terms'\r\n                    value={editedForm.paymentTerms}\r\n                    onChange={e => handleInputChange('paymentTerms', e.target.value)} \r\n                >\r\n                    <option value='1'>Net 1 Day</option>\r\n                    <option value='7'>Net 7 Days</option>\r\n                    <option value='14'>Net 14 Days</option>\r\n                    <option value='30'>Net 30 Days</option>\r\n                </select>\r\n            </div> \r\n            <div className='project-description-container form-container'>\r\n                <label htmlFor='project-description' id='project-description-label'>Project Description</label>\r\n                <input \r\n                    type='text' \r\n                    name='project-description' \r\n                    value={editedForm.description} \r\n                    onChange={e => handleInputChange('description', e.target.value)}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ItemList = ({form, handleFormInputChange}) => {\r\n    return (\r\n        <div className='ItemList-Wrapper'>\r\n            <h3 id='item-list'>Item List</h3>\r\n\r\n            <div className='Items-ItemList'>\r\n                {form.items.map((item, index) => {\r\n                    return (\r\n                        <NewItem \r\n                            index={index}\r\n                            handleFormInputChange={handleFormInputChange}\r\n                            itemInputs={item} \r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const NewItem = ({index, handleFormInputChange, itemInputs}) => {\r\n    return (\r\n        <div className='Item-Wrapper'>\r\n            <div className='Input-Wrapper'>\r\n                <label htmlFor='item-name' id='item-name-label'>Item Name</label>\r\n                <input \r\n                    type='text' \r\n                    name='item-name' \r\n                    value={itemInputs.name}\r\n                    onChange={e => handleFormInputChange(index, 'name', e.target.value)} \r\n                />\r\n            </div>\r\n            <div className='Qty-Container item-container'>\r\n                <label htmlFor='qty'>Qty</label>\r\n                <input \r\n                    type='number' \r\n                    name='qty' \r\n                    value={itemInputs.quantity}\r\n                    onChange={e => handleFormInputChange(index, 'quantity', e.target.value)}\r\n                />\r\n            </div>\r\n            <div className='Price-Container item-container'>\r\n                <label htmlFor='price'>Price</label>\r\n                <input \r\n                    type='number' \r\n                    name='price' \r\n                    value={itemInputs.price}\r\n                    onChange={e => handleFormInputChange(index, 'price', e.target.value)} \r\n                />\r\n            </div>\r\n            <div className='Total-Container item-container'>\r\n                <label htmlFor='total'>Total</label>\r\n                <p id='total-price'>{itemInputs.total}</p>\r\n            </div>\r\n            <button className='Button-Delete'><img src={deleteImg} alt=''/></button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n\r\nexport default EditFormContainer;","C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\utilities\\utils.js",[],[],"C:\\Users\\Memo\\Documents\\Full-Stack\\HTML-CSS-Tutorialk\\invoice-app\\invoice-app\\src\\Components\\InvoiceDetails\\NewInvoices.mjs",[],[],{"ruleId":"59","severity":1,"message":"60","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":19},{"ruleId":"59","severity":1,"message":"63","line":2,"column":21,"nodeType":"61","messageId":"62","endLine":2,"endColumn":29},{"ruleId":"59","severity":1,"message":"60","line":1,"column":20,"nodeType":"61","messageId":"62","endLine":1,"endColumn":29},{"ruleId":"64","severity":1,"message":"65","line":16,"column":8,"nodeType":"66","endLine":16,"endColumn":10,"suggestions":"67"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selectedInvoice' and 'setEditedForm'. Either include them or remove the dependency array. If 'setEditedForm' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["68"],{"desc":"69","fix":"70"},"Update the dependencies array to be: [selectedInvoice, setEditedForm]",{"range":"71","text":"72"},[761,763],"[selectedInvoice, setEditedForm]"]